{
  "name": "readline-sync",
  "version": "0.5.2",
  "title": "readlineSync",
  "description": "Synchronous Readline",
  "keywords": [
    "readline",
    "synchronous",
    "prompt",
    "question",
    "wait",
    "block"
  ],
  "main": "./lib/readline-sync.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "https://github.com/anseki/readline-sync",
  "repository": {
    "type": "git",
    "url": "git://github.com/anseki/readline-sync.git"
  },
  "bugs": {
    "url": "https://github.com/anseki/readline-sync/issues"
  },
  "licenses": "MIT",
  "author": {
    "name": "anseki",
    "url": "https://github.com/anseki"
  },
  "readme": "# readlineSync\n\nSynchronous [Readline](http://nodejs.org/api/readline.html) for interactively running.  \nThe interface is used with `process.stdin` and `process.stdout` in order to accept user input.\n\n## Example\n\n```js\nvar readlineSync = require('readline-sync');\nvar userName = readlineSync.question('May I have your name? :'); // Wait for user's response.\nvar favFood = readlineSync.question('Hi ' + userName + '! What is your favorite food? :');\nconsole.log('Oh, ' + userName + ' likes ' + favFood + '!');\n```\n\n```shell\nMay I have your name? :AnSeki\nHi AnSeki! What is your favorite food? :chocolate\nOh, AnSeki likes chocolate!\n```\n\n## Installation\n\n```\nnpm install readline-sync\n```\n\n## Methods\n\n### question\n\n```js\nline = readlineSync.question([query[, options]])\n```\n\nDisplays the `query` to the user, and then returns the user's response after it has been typed.  \nYou can specify `options`. (see [Options](#options))\n\nThe `query` may be string, or may not be (e.g. number, Date, Object, etc.). This is converted to string (i.e. `toString` method is called) before it is displayed every time.\n\n### prompt\n\n```js\nline = readlineSync.prompt([options])\n```\n\nDisplays the current prompt (See `setPrompt` method) to the user, and then returns the user's response after it has been typed.  \nYou can specify `options`. (see [Options](#options))\n\n### setPrompt\n\n```js\ncurrentPrompt = readlineSync.setPrompt([prompt])\n```\n\nSets the prompt, for example when you run `node` on the command line, you see `> `, which is node's prompt. (See `prompt` method)\n\nThe `prompt` may be string, or may not be (e.g. number, Date, Object, etc.). This is converted to string (i.e. `toString` method is called) before it is displayed every time.  \nFor example, `[foo-directory]#` like a bash shell that show the current directory.\n\n```js\n// Object that has toString method.\nreadlineSync.setPrompt({\n  toString: function() {\n    return '[' + require('path').basename(process.cwd()) + ']# '; // Get and show current directory.\n  }\n})\n```\n\n### setEncoding\n\n```js\ncurrentEncoding = readlineSync.setEncoding([encoding])\n```\n\nSet the encoding method of input (user's response) and output (`prompt` method and `question` method). Defaults to 'utf8'.\n\n### setPrint\n\n```js\nreadlineSync.setPrint([funcPrint])\n```\n\nThe specified `funcPrint` Function is called when any outputs (`prompt` method and `question` method). Defaults to `undefined`.  \nThe `funcPrint` is given two arguments the output text and `encoding`.\n\n![sample](cl_01.png)\n\nFor example, this is used to pass plain texts to the Logger, when texts are colored.\n\n```js\nvar readlineSync = require('readline-sync'),\n  user, pw, cmd;\nrequire('colors');\n\nreadlineSync.setPrint(function(display, encoding) {\n  logger.log(display.stripColors); // Remove control characters.\n});\n\nconsole.log('Your account required.'.grey);\nuser = readlineSync.question('USER NAME'.white.inverse + ': ');\npw = readlineSync.question('PASSWORD'.white.inverse + ': ', {noEchoBack: true});\n// Authorization ...\nconsole.log(('Welcome, ' + user + '!').green.bold);\n\nreadlineSync.setPrompt('> '.bold.red);\ncmd = readlineSync.prompt();\n```\n\n## Options\n\nAn `options` Object can be specified to `prompt` method and `question` method. This Object can have following properties.\n\n### noEchoBack\n\nType: Boolean  \nDefault: `false`\n\nIf `true` is specified, echo back is avoided. It is used to hide the secret text (e.g. password) which is typed by user on screen.  \nFor example:\n\n```js\npassword = readlineSync.question('PASSWORD :', {noEchoBack: true});\nconsole.log('Login ...');\n```\n\nThe typed text is not shown on screen.\n\n```shell\nPASSWORD :\nLogin ...\n```\n\n### noTrim\n\nType: Boolean  \nDefault: `false`\n\nBy default, the leading and trailing white spaces are removed from typed text. If `true` is specified, those are not removed.\n\n## With Task Runner\n\nThe easy way to control the flow of task runner by the user's response:\n* [Grunt](http://gruntjs.com/) plugin: [grunt-confirm](https://github.com/anseki/grunt-confirm)\n* [gulp](http://gulpjs.com/) plugin: [gulp-confirm](https://github.com/anseki/gulp-confirm)\n\nIf you want to control the flow of task runner (e.g. [Grunt](http://gruntjs.com/)), call readlineSync in a task callback that is called by task runner. Then the flow of tasks is paused and it is controlled by user.\n\nExample: by using [grunt-task-helper](https://github.com/anseki/grunt-task-helper)\n\n```shell\n$ grunt\nRunning \"fileCopy\" task\nFiles already exist:\n  file-a.png\n  file-b.js\nOverwrite? (y/n) :y\nfile-a.png copied.\nfile-b.js copied.\nDone.\n```\n\n`Gruntfile.js`\n\n```js\ngrunt.initConfig({\n  taskHelper: {\n    fileCopy: {\n      options: {\n        handlerByTask: function() {\n          // Abort the task if user don't want.\n          return readlineSync.question('Overwrite? (y/n) :')\n            .toLowerCase() === 'y';\n          // Or process.exit()\n        },\n        filesArray: []\n      },\n      ...\n    }\n  },\n  copy: {\n    fileCopy: {\n      files: '<%= taskHelper.fileCopy.options.filesArray %>'\n    }\n  }\n});\n```\n\n## Note\n\n### Platforms\n\nThe your Node and OS may not support interactively reading from stdin. The stdin interfaces are different by platforms.  \nIf in those platforms, an error is thrown.\n\n```js\ntry {\n  answer = readlineSync.question('What is your favorite food? :');\n} catch (e) {\n  console.error(e);\n  process.exit(1);\n}\n```\n\n### Reading by shell\n\nreadlineSync tries reading from stdin by shell if it is needed. And, it use \"piping via files\" for synchronous running.  \nAs everyone knows, \"piping via files\" is no good. It blocks event loop and a process. It may make your script be slow.\n\nWhy did I choose it? :\n\n+ The best solution is [child_process.execSync](https://github.com/joyent/node/blob/master/doc/api/child_process.markdown#child_processexecsynccommand-options) in core modules of Node. But it is not supported by current version.\n+ The good modules (native addon) for synchronous execution exist. But node-gyp can't compile those in some platforms or Node versions.\n+ I think that the security is important more than the speed. Some modules have problem about security. (Those don't protect data.) I think that the speed is not needed usually, because readlineSync is used while user types keys.\n\nSomeday, I may rewrite readlineSync to use child_process.execSync, or safety module.\n\n## Release History\n * 2015-01-27           v0.5.0          Add `options.noTrim`.\n * 2014-07-12           v0.4.0          Add `options.noEchoBack`.\n * 2014-07-12           v0.3.0          Add `setPrint()`.\n * 2013-08-30           v0.2.0          Rewrite exporting methods.\n * 2013-08-29           v0.1.0          Initial release.\n",
  "readmeFilename": "README.md",
  "_id": "readline-sync@0.5.2",
  "_from": "readline-sync@0.5.2"
}
